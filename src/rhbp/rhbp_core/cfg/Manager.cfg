#!/usr/bin/env python
PACKAGE = "rhbp_core"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("situationBias",            double_t, 0, "weight for preconditions/situation perception",   1.0, 0,  1)
gen.add("predecessorBias",          double_t, 0, "weight for predecessor behaviours",               1.0, 0,  1)
gen.add("successorBias",            double_t, 0, "weight for successor behaviours",                 1.0, 0,  1)
gen.add("conflictorBias",           double_t, 0, "weight for conflicting behaviours",               1.0, 0,  1)
gen.add("goalBias",                 double_t, 0, "weight for goal pursuance",                       1.0, 0,  1)
gen.add("planBias",                 double_t, 0, "weight for the planner",                          1.0, 0,  1)
gen.add("activationDecay",          double_t, 0, "step decay for the activation of a behaviour",    0.9, 0,  1)
gen.add("activationThresholdDecay", double_t, 0, "step decay for the activation threshold",         0.8, 0,  1)
gen.add("activationGoalPriority",   bool_t,   0, "Weight goal activation by goal priorities",       False)
gen.add("plan_monitoring_all_sensor_changes_by_behaviours", bool_t, 0, "Replan if sensor change is not from executed behaviour",    True)
gen.add("plan_monitoring_behaviour_missing_influence",      bool_t, 0, "Replan if behaviour did not influence sensor as expected",  True)
gen.add("plan_monitoring_unexpected_behaviour_finished",    bool_t, 0, "Replan if unexpected behaviour finished",                   True)

# Following settings will not be enabled because they are still used in constructors and this would maybe overwrite
# such configuration
# gen.add("activationThreshold",      double_t, 0, "initial activation threshold",                    7.0, 0, 10)
# gen.add("max_parallel_behaviours",  int_t,    0, "Number of max. parallel executed behaviours",      -1,-1, 10)


exit(gen.generate(PACKAGE, "dynamic_rhbp_manager_conf", "Manager"))
